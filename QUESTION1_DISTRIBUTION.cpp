#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <fstream>

#include <TRandom>
#include <TMath>

using namespace std;

double parameter;

//***********************************************************************************************************************************************
//***********************************************USER DEFINED FUNCTIONS**************************************************************************
//***********************************************************************************************************************************************

double CHI_SQUARE_FIT( double *x, double *par )
{
value = par[0]*pow(x[0],-0.5)*exp(-x[0]/2.0);
parameter = par[0];
return value;
}

double CUMULATIVE_CHI_SQUARE( double *x, double *par )
{
value = par[0]*TMath::Erf(sqrt(x[0]/2.0));
return value;
}

//***********************************************************************************************************************************************
//***** MAIN PROGRAM THAT READS IN VALUES OF ln_LAMBDA FOR 100 EXPERIMENTS PRODUCED BY QUESTION1.cpp PROGRAM ************************************
//***********************************************************************************************************************************************

int QUESTION1_DISTRIBUTION()
{

//***********************************************************************************************************************************************
//******************************************************** DEFINING HISTOGRAMS ******************************************************************
//***********************************************************************************************************************************************

	TCanvas *canvas_1 = new TCanvas("canvas_1", "canvas_1", 0,0,700,500);
	canvas_1 -> cd();

	gStyle -> SetOptStat(1111111);

	TH1F *LOG_LAMBDA_DISTRIBUTION = new TH1F("-2log(LAMBDA)", "-2LOG(LAMBDA) DISTRIBUTION", 80, 0.0, 8.0);
	LOG_LAMBDA_DISTRIBUTION -> GetYaxis() -> SetTitle("NUMBER OF EXPERIMENTS");
	LOG_LAMBDA_DISTRIBUTION -> GetXaxis() -> SetTitle("-2log(LAMBDA)");

double ln_LIKELIHOOD_H0[100], ln_LIKELIHOOD_H1[100], ln_LAMBDA[100];	

//***********************************************************************************************************************************************
//****************************** COPY AND PASTING OF DATA FROM FILE QUESTION1.txt GENERATED BY QUESTION1.cpp ************************************
//***********************************************************************************************************************************************
	
ln_LIKELIHOOD_H0[0]=        -284.459613383279; ln_LIKELIHOOD_H1[0]=        -284.406586611321; ln_LAMBDA[0]=      -0.0530267719576614; 
ln_LIKELIHOOD_H0[1]=        -276.404522299561; ln_LIKELIHOOD_H1[1]=        -275.978565102217; ln_LAMBDA[1]=       -0.425957197343564; 
ln_LIKELIHOOD_H0[2]=        -267.820117154562; ln_LIKELIHOOD_H1[2]=        -267.807345283813; ln_LAMBDA[2]=      -0.0127718707489635; 
ln_LIKELIHOOD_H0[3]=        -279.996384708288; ln_LIKELIHOOD_H1[3]=        -279.585193323598; ln_LAMBDA[3]=       -0.411191384690881; 
ln_LIKELIHOOD_H0[4]=        -285.904308459054; ln_LIKELIHOOD_H1[4]=        -285.675444726882; ln_LAMBDA[4]=       -0.228863732171931; 
ln_LIKELIHOOD_H0[5]=        -263.773583567209; ln_LIKELIHOOD_H1[5]=        -263.246034201615; ln_LAMBDA[5]=       -0.527549365593984; 
ln_LIKELIHOOD_H0[6]=         -264.81992642618; ln_LIKELIHOOD_H1[6]=        -263.545727038575; ln_LAMBDA[6]=         -1.2741993876046; 
ln_LIKELIHOOD_H0[7]=        -275.226132231006; ln_LIKELIHOOD_H1[7]=        -275.175786496943; ln_LAMBDA[7]=      -0.0503457340623186; 
ln_LIKELIHOOD_H0[8]=        -257.326944568247; ln_LIKELIHOOD_H1[8]=        -255.067732403699; ln_LAMBDA[8]=        -2.25921216454771; 
ln_LIKELIHOOD_H0[9]=        -283.400822014231; ln_LIKELIHOOD_H1[9]=        -283.400822014231; ln_LAMBDA[9]=                        0; 
ln_LIKELIHOOD_H0[10]=         -283.43745722166; ln_LIKELIHOOD_H1[10]=        -282.914125647404; ln_LAMBDA[10]=       -0.523331574255963; 
ln_LIKELIHOOD_H0[11]=        -279.911838073185; ln_LIKELIHOOD_H1[11]=        -279.727432847833; ln_LAMBDA[11]=       -0.184405225352066; 
ln_LIKELIHOOD_H0[12]=        -264.630172429835; ln_LIKELIHOOD_H1[12]=        -264.054419774348; ln_LAMBDA[12]=       -0.575752655487463; 
ln_LIKELIHOOD_H0[13]=        -263.594009318971; ln_LIKELIHOOD_H1[13]=        -261.813600947995; ln_LAMBDA[13]=        -1.78040837097592; 
ln_LIKELIHOOD_H0[14]=        -286.695363973771; ln_LIKELIHOOD_H1[14]=        -286.556208806989; ln_LAMBDA[14]=        -0.13915516678145; 
ln_LIKELIHOOD_H0[15]=        -260.662926031912; ln_LIKELIHOOD_H1[15]=        -259.124577704015; ln_LAMBDA[15]=        -1.53834832789687; 
ln_LIKELIHOOD_H0[16]=         -283.56095187125; ln_LIKELIHOOD_H1[16]=        -283.367399211606; ln_LAMBDA[16]=       -0.193552659644126; 
ln_LIKELIHOOD_H0[17]=        -292.955759699006; ln_LIKELIHOOD_H1[17]=        -292.955759699006; ln_LAMBDA[17]=                        0; 
ln_LIKELIHOOD_H0[18]=         -284.30477211741; ln_LIKELIHOOD_H1[18]=        -283.965126861197; ln_LAMBDA[18]=       -0.339645256212805; 
ln_LIKELIHOOD_H0[19]=        -272.191720126143; ln_LIKELIHOOD_H1[19]=        -271.853880716999; ln_LAMBDA[19]=       -0.337839409144522; 
ln_LIKELIHOOD_H0[20]=        -264.602029113515; ln_LIKELIHOOD_H1[20]=        -263.823597828028; ln_LAMBDA[20]=       -0.778431285487386; 
ln_LIKELIHOOD_H0[21]=        -281.473775849732; ln_LIKELIHOOD_H1[21]=        -281.304566211333; ln_LAMBDA[21]=       -0.169209638399138; 
ln_LIKELIHOOD_H0[22]=        -269.407630682837; ln_LIKELIHOOD_H1[22]=        -269.344602382165; ln_LAMBDA[22]=      -0.0630283006718173; 
ln_LIKELIHOOD_H0[23]=        -259.492571869913; ln_LIKELIHOOD_H1[23]=        -259.162089455447; ln_LAMBDA[23]=       -0.330482414466189; 
ln_LIKELIHOOD_H0[24]=        -291.177579112093; ln_LIKELIHOOD_H1[24]=         -291.02665745163; ln_LAMBDA[24]=       -0.150921660462075; 
ln_LIKELIHOOD_H0[25]=        -291.386716756886; ln_LIKELIHOOD_H1[25]=        -291.385035669808; ln_LAMBDA[25]=     -0.00168108707805459; 
ln_LIKELIHOOD_H0[26]=        -291.535237326954; ln_LIKELIHOOD_H1[26]=        -291.444654984936; ln_LAMBDA[26]=      -0.0905823420179104; 
ln_LIKELIHOOD_H0[27]=        -274.280335426871; ln_LIKELIHOOD_H1[27]=        -274.170607190403; ln_LAMBDA[27]=       -0.109728236467788; 
ln_LIKELIHOOD_H0[28]=          -285.8788198767; ln_LIKELIHOOD_H1[28]=        -285.865148710127; ln_LAMBDA[28]=      -0.0136711665733742; 
ln_LIKELIHOOD_H0[29]=        -288.373792598555; ln_LIKELIHOOD_H1[29]=        -286.859145355788; ln_LAMBDA[29]=        -1.51464724276713; 
ln_LIKELIHOOD_H0[30]=        -270.473925287183; ln_LIKELIHOOD_H1[30]=        -270.470334141278; ln_LAMBDA[30]=     -0.00359114590537501; 
ln_LIKELIHOOD_H0[31]=        -302.451694885943; ln_LIKELIHOOD_H1[31]=        -299.449891746262; ln_LAMBDA[31]=        -3.00180313968025; 
ln_LIKELIHOOD_H0[32]=        -303.511291023139; ln_LIKELIHOOD_H1[32]=         -302.66769937207; ln_LAMBDA[32]=       -0.843591651069175; 
ln_LIKELIHOOD_H0[33]=        -281.951106108499; ln_LIKELIHOOD_H1[33]=        -281.919580168201; ln_LAMBDA[33]=      -0.0315259402983088; 
ln_LIKELIHOOD_H0[34]=        -281.656681413228; ln_LIKELIHOOD_H1[34]=        -281.637707599321; ln_LAMBDA[34]=      -0.0189738139072801; 
ln_LIKELIHOOD_H0[35]=        -292.151452596753; ln_LIKELIHOOD_H1[35]=        -291.620262707334; ln_LAMBDA[35]=        -0.53118988941975; 
ln_LIKELIHOOD_H0[36]=        -293.337594014013; ln_LIKELIHOOD_H1[36]=        -292.888790130577; ln_LAMBDA[36]=       -0.448803883435858; 
ln_LIKELIHOOD_H0[37]=        -272.062444340914; ln_LIKELIHOOD_H1[37]=        -270.981548909714; ln_LAMBDA[37]=        -1.08089543119979; 
ln_LIKELIHOOD_H0[38]=         -272.01913577611; ln_LIKELIHOOD_H1[38]=        -271.632012693604; ln_LAMBDA[38]=       -0.387123082505752; 
ln_LIKELIHOOD_H0[39]=        -280.736529863714; ln_LIKELIHOOD_H1[39]=        -280.491789657499; ln_LAMBDA[39]=       -0.244740206214601; 
ln_LIKELIHOOD_H0[40]=        -283.107653579822; ln_LIKELIHOOD_H1[40]=        -283.096860508332; ln_LAMBDA[40]=      -0.0107930714906388; 
ln_LIKELIHOOD_H0[41]=        -281.075844060235; ln_LIKELIHOOD_H1[41]=        -281.069777182131; ln_LAMBDA[41]=     -0.00606687810477524; 
ln_LIKELIHOOD_H0[42]=        -278.431060233504; ln_LIKELIHOOD_H1[42]=        -278.041239961545; ln_LAMBDA[42]=       -0.389820271958854; 
ln_LIKELIHOOD_H0[43]=        -254.381345645229; ln_LIKELIHOOD_H1[43]=        -253.535012714752; ln_LAMBDA[43]=       -0.846332930476478; 
ln_LIKELIHOOD_H0[44]=        -292.181372543313; ln_LIKELIHOOD_H1[44]=        -292.146486611309; ln_LAMBDA[44]=      -0.0348859320042152; 
ln_LIKELIHOOD_H0[45]=        -288.378101306869; ln_LIKELIHOOD_H1[45]=        -286.913173471209; ln_LAMBDA[45]=        -1.46492783565975; 
ln_LIKELIHOOD_H0[46]=         -276.35761911315; ln_LIKELIHOOD_H1[46]=        -276.339685409222; ln_LAMBDA[46]=      -0.0179337039277243; 
ln_LIKELIHOOD_H0[47]=         -275.53850934224; ln_LIKELIHOOD_H1[47]=         -274.85579334359; ln_LAMBDA[47]=       -0.682715998650565; 
ln_LIKELIHOOD_H0[48]=        -285.015143884111; ln_LIKELIHOOD_H1[48]=        -284.068651675325; ln_LAMBDA[48]=       -0.946492208785685; 
ln_LIKELIHOOD_H0[49]=        -269.592898449451; ln_LIKELIHOOD_H1[49]=        -268.504338427266; ln_LAMBDA[49]=        -1.08856002218471; 
ln_LIKELIHOOD_H0[50]=        -281.499119423527; ln_LIKELIHOOD_H1[50]=        -281.180471710431; ln_LAMBDA[50]=       -0.318647713096595; 
ln_LIKELIHOOD_H0[51]=        -278.153825372136; ln_LIKELIHOOD_H1[51]=        -278.148051539125; ln_LAMBDA[51]=     -0.00577383301111922; 
ln_LIKELIHOOD_H0[52]=        -267.189306402455; ln_LIKELIHOOD_H1[52]=        -264.652392953758; ln_LAMBDA[52]=        -2.53691344869782; 
ln_LIKELIHOOD_H0[53]=         -294.15614888782; ln_LIKELIHOOD_H1[53]=        -294.054784696303; ln_LAMBDA[53]=       -0.101364191517007; 
ln_LIKELIHOOD_H0[54]=        -264.014490855697; ln_LIKELIHOOD_H1[54]=          -263.0026845233; ln_LAMBDA[54]=        -1.01180633239659; 
ln_LIKELIHOOD_H0[55]=        -279.774269625913; ln_LIKELIHOOD_H1[55]=        -279.551440387905; ln_LAMBDA[55]=       -0.222829238007819; 
ln_LIKELIHOOD_H0[56]=          -253.0724865575; ln_LIKELIHOOD_H1[56]=        -251.866373508709; ln_LAMBDA[56]=        -1.20611304879111; 
ln_LIKELIHOOD_H0[57]=        -253.036711553419; ln_LIKELIHOOD_H1[57]=        -252.540612756271; ln_LAMBDA[57]=       -0.496098797147624; 
ln_LIKELIHOOD_H0[58]=        -294.198531670193; ln_LIKELIHOOD_H1[58]=         -293.67331409482; ln_LAMBDA[58]=       -0.525217575373176; 
ln_LIKELIHOOD_H0[59]=        -277.532673728989; ln_LIKELIHOOD_H1[59]=        -277.244972478194; ln_LAMBDA[59]=       -0.287701250794044; 
ln_LIKELIHOOD_H0[60]=        -282.583282304804; ln_LIKELIHOOD_H1[60]=        -282.538802103185; ln_LAMBDA[60]=      -0.0444802016195922; 
ln_LIKELIHOOD_H0[61]=        -317.976317181429; ln_LIKELIHOOD_H1[61]=        -314.980853271235; ln_LAMBDA[61]=        -2.99546391019379; 
ln_LIKELIHOOD_H0[62]=        -285.692662017785; ln_LIKELIHOOD_H1[62]=        -285.681294538337; ln_LAMBDA[62]=      -0.0113674794480971; 
ln_LIKELIHOOD_H0[63]=         -286.05879483797; ln_LIKELIHOOD_H1[63]=        -286.050386392555; ln_LAMBDA[63]=     -0.00840844541471597; 
ln_LIKELIHOOD_H0[64]=        -292.836204855762; ln_LIKELIHOOD_H1[64]=        -292.734612063957; ln_LAMBDA[64]=       -0.101592791805444; 
ln_LIKELIHOOD_H0[65]=        -289.758667396741; ln_LIKELIHOOD_H1[65]=        -289.496156460117; ln_LAMBDA[65]=       -0.262510936623471; 
ln_LIKELIHOOD_H0[66]=        -280.768038929505; ln_LIKELIHOOD_H1[66]=        -280.755449647086; ln_LAMBDA[66]=      -0.0125892824194125; 
ln_LIKELIHOOD_H0[67]=        -296.707853091947; ln_LIKELIHOOD_H1[67]=        -296.009406821667; ln_LAMBDA[67]=       -0.698446270280499; 
ln_LIKELIHOOD_H0[68]=        -277.801070579543; ln_LIKELIHOOD_H1[68]=        -277.457301116826; ln_LAMBDA[68]=       -0.343769462716921; 
ln_LIKELIHOOD_H0[69]=        -286.914369021847; ln_LIKELIHOOD_H1[69]=        -286.896480297019; ln_LAMBDA[69]=      -0.0178887248282535; 
ln_LIKELIHOOD_H0[70]=        -273.902851145525; ln_LIKELIHOOD_H1[70]=        -273.626851066359; ln_LAMBDA[70]=       -0.276000079165556; 
ln_LIKELIHOOD_H0[71]=        -283.962421925982; ln_LIKELIHOOD_H1[71]=        -283.888685744227; ln_LAMBDA[71]=      -0.0737361817552369; 
ln_LIKELIHOOD_H0[72]=        -289.233802471557; ln_LIKELIHOOD_H1[72]=        -289.194143968778; ln_LAMBDA[72]=      -0.0396585027788774; 
ln_LIKELIHOOD_H0[73]=        -270.736251480029; ln_LIKELIHOOD_H1[73]=        -269.972074406475; ln_LAMBDA[73]=       -0.764177073554151; 
ln_LIKELIHOOD_H0[74]=        -301.180621003039; ln_LIKELIHOOD_H1[74]=        -300.266829949909; ln_LAMBDA[74]=       -0.913791053130296; 
ln_LIKELIHOOD_H0[75]=        -283.671804814408; ln_LIKELIHOOD_H1[75]=        -283.582710065922; ln_LAMBDA[75]=      -0.0890947484864455; 
ln_LIKELIHOOD_H0[76]=        -272.171805404276; ln_LIKELIHOOD_H1[76]=        -268.520847618746; ln_LAMBDA[76]=        -3.65095778552984; 
ln_LIKELIHOOD_H0[77]=        -269.467746960018; ln_LIKELIHOOD_H1[77]=          -269.3735466146; ln_LAMBDA[77]=      -0.0942003454186988; 
ln_LIKELIHOOD_H0[78]=        -311.362229585252; ln_LIKELIHOOD_H1[78]=        -310.081188668199; ln_LAMBDA[78]=        -1.28104091705296; 
ln_LIKELIHOOD_H0[79]=        -287.702533754887; ln_LIKELIHOOD_H1[79]=        -287.419359668009; ln_LAMBDA[79]=       -0.283174086878489; 
ln_LIKELIHOOD_H0[80]=        -281.952154313059; ln_LIKELIHOOD_H1[80]=        -281.574064014578; ln_LAMBDA[80]=       -0.378090298480799; 
ln_LIKELIHOOD_H0[81]=        -296.255241940024; ln_LIKELIHOOD_H1[81]=        -295.727182268409; ln_LAMBDA[81]=       -0.528059671615495; 
ln_LIKELIHOOD_H0[82]=        -281.849507937621; ln_LIKELIHOOD_H1[82]=        -281.697372369808; ln_LAMBDA[82]=       -0.152135567812309; 
ln_LIKELIHOOD_H0[83]=        -265.632932703454; ln_LIKELIHOOD_H1[83]=        -265.516913859366; ln_LAMBDA[83]=       -0.116018844088217; 
ln_LIKELIHOOD_H0[84]=         -268.34980469892; ln_LIKELIHOOD_H1[84]=        -268.347054479747; ln_LAMBDA[84]=     -0.00275021917263985; 
ln_LIKELIHOOD_H0[85]=        -292.895446301935; ln_LIKELIHOOD_H1[85]=        -292.760115622125; ln_LAMBDA[85]=       -0.135330679809556; 
ln_LIKELIHOOD_H0[86]=        -294.269422087345; ln_LIKELIHOOD_H1[86]=        -293.483412964557; ln_LAMBDA[86]=       -0.786009122787959; 
ln_LIKELIHOOD_H0[87]=        -278.063451652598; ln_LIKELIHOOD_H1[87]=        -278.020021736032; ln_LAMBDA[87]=      -0.0434299165656853; 
ln_LIKELIHOOD_H0[88]=         -299.34606472062; ln_LIKELIHOOD_H1[88]=        -298.407997493616; ln_LAMBDA[88]=       -0.938067227004183; 
ln_LIKELIHOOD_H0[89]=        -265.800910222868; ln_LIKELIHOOD_H1[89]=        -265.627763483747; ln_LAMBDA[89]=       -0.173146739121762; 
ln_LIKELIHOOD_H0[90]=        -283.723917887025; ln_LIKELIHOOD_H1[90]=        -283.705566606272; ln_LAMBDA[90]=      -0.0183512807528246; 
ln_LIKELIHOOD_H0[91]=        -289.228658851005; ln_LIKELIHOOD_H1[91]=         -288.93435842173; ln_LAMBDA[91]=       -0.294300429275211; 
ln_LIKELIHOOD_H0[92]=        -277.013849241268; ln_LIKELIHOOD_H1[92]=        -276.989874724315; ln_LAMBDA[92]=       -0.023974516953615; 
ln_LIKELIHOOD_H0[93]=        -256.945656013249; ln_LIKELIHOOD_H1[93]=        -256.313440415626; ln_LAMBDA[93]=       -0.632215597622348; 
ln_LIKELIHOOD_H0[94]=        -249.804385319343; ln_LIKELIHOOD_H1[94]=        -247.337319513711; ln_LAMBDA[94]=        -2.46706580563216; 
ln_LIKELIHOOD_H0[95]=        -277.096459380232; ln_LIKELIHOOD_H1[95]=        -276.819919780348; ln_LAMBDA[95]=       -0.276539599883051; 
ln_LIKELIHOOD_H0[96]=        -269.383595241308; ln_LIKELIHOOD_H1[96]=        -269.334218149692; ln_LAMBDA[96]=       -0.049377091616293; 
ln_LIKELIHOOD_H0[97]=        -271.111115718915; ln_LIKELIHOOD_H1[97]=        -270.027723717322; ln_LAMBDA[97]=        -1.08339200159321; 
ln_LIKELIHOOD_H0[98]=          -278.0550796869; ln_LIKELIHOOD_H1[98]=        -277.711153180098; ln_LAMBDA[98]=        -0.34392650680212; 
ln_LIKELIHOOD_H0[99]=        -247.790787946767; ln_LIKELIHOOD_H1[99]=        -247.715134250286; ln_LAMBDA[99]=      -0.0756536964803161; 



//***********************************************************************************************************************************************
//************************* FILLING HISTOGRAM WITH DISTRIBUTION OF -2.0*ln_LAMBDA[] *************************************************************
//***********************************************************************************************************************************************	

	for (int j=0; j<100; j++)
	{
	LOG_LAMBDA_DISTRIBUTION -> Fill(-2.0*ln_LAMBDA[j]);
	}

	LOG_LAMBDA_DISTRIBUTION -> Draw();
	
//***********************************************************************************************************************************************
//********************************* FITTING CHI_SQUARE TO THE DISTRIBUTION **********************************************************************
//***********************************************************************************************************************************************
	
	TF1 *func1 = new TF1("FIT_CHI_SQUARE", CHI_SQUARE_FIT, 0.0, 8.0, 1);
	func1 -> SetParameter(0, 1.0/(sqrt(2*3.14159265)));
	func1 -> SetLineWidth(2.0);
	func1 -> SetLineColor(2);
	
	LOG_LAMBDA_DISTRIBUTION -> Fit("FIT_CHI_SQUARE", "SAME");

//***********************************************************************************************************************************************
//******************************************************** PLOTTING CUMULATIVE_CHI_SQUARE ON SAME HISTOGRAM *************************************
//***********************************************************************************************************************************************
	
	TF1 *func2 = new TF1("FIT_CUMULATIVE_CHI_SQUARE", CUMULATIVE_CHI_SQUARE, 0.0, 8.0, 1);
	func2 -> SetParameter(0, parameter*sqrt(2.0*3.14159265) );
	func2 -> FixParameter(0, parameter*sqrt(2.0*3.14159265));
	func2 -> SetLineWidth(2.0);
	func2 -> SetLineColor(3);
	
	LOG_LAMBDA_DISTRIBUTION -> Fit("FIT_CUMULATIVE_CHI_SQUARE", "+SAME");


//***********************************************************************************************************************************************
//******************************************************** CALCULATING 10% REJECTION REGION *****************************************************
//***********************************************************************************************************************************************

	double z;
	
	z = func2->GetX(9.0, 0.0, 8.0);
	
	cout<<"THE REJECTION REGION FOR SIZE OF THE TEST TO BE 10% IS -2.0*ln(LAMBDA)>="<<z<<endl;
	cout<<"AND THEREFORE, LAMBDA_cut="<<exp(-z/2.0)<<endl;
	cout<<"HENCE,WE ACCEPT A TRIAL IF LAMBDA > LAMBDA_CUT"<<endl;
	
			//	cout<<setw(5)<<z<<setw(15)<<func2->Integral(0.0, z)<<setw(15)<<func2->Integral(0.0, z-0.001)<<endl;
	
	int zz= static_cast <int> (z*10);
	
	cout<<"TRIALS THAT FALL PRIOR TO BIN # "<<zz<<" ARE ACCEPTED"<<endl;

	cout<<"HENCE "<<LOG_LAMBDA_DISTRIBUTION -> Integral(zz, 80)<<" TRIALS OUT OF TOTAL OF 100 FAIL THIS TEST"<<endl;
	
	

}



// THIS PIECE OF CODE WORKS FINE IN C++ BUT NOT WORKING WITH ROOT SESSION. DOES NOT READ NEXT LINE OF DATA.
/*
	ifstream INPUT;
	INPUT.open("QUESTION1B_COPY.txt");
	INPUT.precision(15);
	cout.precision(15);
	
	double A, B, C;
	int i=0;
	while(!INPUT.eof()) 
	{
	
	INPUT>>A>>B>>C;
		if(!INPUT.eof())
		{
		cout<<"ln_LIKELIHOOD_H0["<<i<<"]="<<setw(25)<<A<<"; "<<"ln_LIKELIHOOD_H1["<<i<<"]="<<setw(25)<<B<<"; "<<"ln_LAMBDA["<<i<<"]="<<setw(25)<<C<<"; "<<endl;
		}
	i++;
	}
*/
